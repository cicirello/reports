{
  "ALG-24-009": {
    "arxiv": "https://arxiv.org/abs/2405.19493",
    "code": "https://github.com/cicirello/ZigguratGaussian"
  },
  
  "ALG-24-008": {
    "doi": "10.1002/spe.3379",
    "arxiv": "https://arxiv.org/abs/2405.12371",
    "code": "https://github.com/cicirello/small-sample-experiments",
    "description": "We present algorithms for generating small random samples without replacement. We consider two cases. We present an algorithm for sampling a pair of distinct integers, and an algorithm for sampling a triple of distinct integers. The worst-case runtime of both algorithms is constant, while the worst-case runtimes of common algorithms for the general case of sampling k elements from a set of n increase with n. Java implementations of both algorithms are included in the open source library ρμ.",
    "citation-type": "Journal Ref",
    "citation": "Vincent A. Cicirello. 2025. Algorithms for Generating Small Random Samples. <i>Software: Practice and Experience</i>, February 2025, 55(2): 298-306. <a href=\"https://doi.org/10.1002/spe.3379\">https://doi.org/10.1002/spe.3379</a>"
  },
  
  "ALG-24-007": {
    "arxiv": "https://arxiv.org/abs/2403.11018",
    "code": "https://github.com/cicirello/btpe-iterations",
    "description": "The BTPE algorithm (Binomial, Triangle, Parallelogram, Exponential) of Kachitvichyanukul and Schmeiser is one of the faster and more widely utilized algorithms for generating binomial random variates. Cicirello's open source Java library, ρμ, includes an implementation of BTPE as well as a variety of other random number related utilities. In this report, I explore the average case runtime of the BTPE algorithm when generating random values from binomial distribution B(n,p). Beginning with Kachitvichyanukul and Schmeiser's formula for the expected number of acceptance-rejection sampling iterations, I analyze the limit behavior as n approaches infinity, and show that the average runtime of BTPE converges to a constant. I instrument the open source Java implementation from the ρμ library to experimentally validate the analysis."
  },
  
  "ALG-23-006": {
    "code": "https://github.com/cicirello/btpe-iterations",
    "pdf-filename": "VAC-TR-23-006.pdf"
  },
  
  "ALG-20-005": {
    "doi": "10.4108/eai.13-7-2018.163925",
    "arxiv": "https://arxiv.org/abs/1905.02752",
    "pdf-filename": "VAC-TR-20-005.pdf",
    "citation-type": "Journal Ref",
    "citation": "Vincent A. Cicirello. 2020. Kendall tau sequence distance: Extending Kendall tau from ranks to sequences. <i>Industrial Networks and Intelligent Systems</i> 7(23), Article e1 (April 2020), 12 pages. <a href=\"https://doi.org/10.4108/eai.13-7-2018.163925\">https://doi.org/10.4108/eai.13-7-2018.163925</a>"
  },
  
  "DIST-17-004": {
    "arxiv": "https://arxiv.org/abs/1708.05264",
    "code": "https://github.com/cicirello/ClusterPerformanceTests",
    "pdf-filename": "VAC-TR-17-004.pdf"
  },
  
  "AI-09-003": {
    "pdf-filename": "VAC-TR-09-003.pdf",
    "description": "We develop theoretical foundations for integrating multiple heuristics within a stochastic sampling search procedure. Such a capability is important in problem domains where several heuristics are available but none dominate across all problem instances. We view this selection problem as an online learning problem where the search framework builds models of the distributions of the quality of solutions given by the heuristics and uses those models as guidance for selecting heuristics throughout the search process. One key observation is that the distribution of solution values obtained across multiple runs of a stochastic sampling search algorithm using a strong domain heuristic is heavy-tailed, motivating the use of the Generalized Extreme Value distribution to model the performance of a search heuristic. Based on an analysis of the Max K-Armed Bandit, we develop an exploration policy for allocating trials of a stochastic sampling algorithm amongst the set of component heuristics. Built upon these foundations is our search framework, Quality Distribution Based sEArch CONtrol (QD-BEACON), which we validate on NP-Hard scheduling problems."
  },
  
  "AGENTS-08-002": {
    "pdf-filename": "VAC-TR-08-002.pdf",
    "description": "Computational frameworks motivated by biological systems abound, which use mechanisms adapted from models of naturally occurring behavior such as foraging, immuno-response, dominance contests, behavioral thresholds for task performance, worker recruitment, etc. These nature-inspired systems are often robust, effective problem solvers. The objective of this paper is to provide examples of how game theory can be used to explain the emergent behavior of collective problem solving systems. We focus on an existing multi-agent task allocation protocol inspired by a computational model of wasp behavior."
  },
  
  "AI-08-001": {
    "pdf-filename": "VAC-TR-08-001.pdf",
    "description": "This paper considers integrating multiple heuristics into Value Biased Stochastic Sampling (VBSS). We developed techniques that allow VBSS to self-select which heuristic to use from a set of heuristics. Our approach relies on modeling the distribution of the quality of solutions obtained by VBSS over its allocated set of restarts. This paper presents our analysis of potential models, including goodness of fit tests for several possible assumptions we can make about the distribution of the quality of solutions, which leads us to the selection of the Generalized Extreme Value Distribution to model randomized heuristic performance.",
    "note": "Presented at the 40th Symposium on the Interface: Computing Science and Statistics (conference without proceedings), in Durham, NC, sponsored by the National Institute of Statistical Sciences"
  }
}
